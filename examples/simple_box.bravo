// Borrowed from:
//   http://www.netmagazine.com/files/tutorials/demos/2011/07/get-started-with-webgl-draw-a-square/demo/demo.html
function main(p){
  var log = p.log.bind(p);
  var gl;

  p.onchangeview = function(view) {
    var rect = view.rect;

    if (!gl) {
      gl = new p.Graphics3D(rect);

      /*
      gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque
      gl.clearDepth(1.0);                 // Clear everything
      gl.enable(gl.DEPTH_TEST);           // Enable depth testing
      gl.depthFunc(gl.LEQUAL);            // Near things obscure far things
      initShaders(gl, log);
      initBuffers(gl, log);
      drawFrame();
      */

      gl.viewport(0, 0, rect.width, rect.height);
      gl.clearColor(0, 0.5, 0, 1);
      gl.clear(gl.COLOR_BUFFER_BIT);

      var f = [
        "#ifdef GL_ES",
        "  precision highp float;",
        "#endif",
        "",
        "uniform vec4 uColor;",
        "",
        "void main() {",
        "  gl_FragColor = uColor;",
        //"  gl_FragColor =  vec4(0.0, 0.0, 1.0, 1.0);",
        "}",
        ""].join("\n");

      var v = [
        "attribute vec2 aVertexPosition;",
        "",
        "void main() {",
        " gl_Position = vec4(aVertexPosition, 0.0, 1.0);",
        "}",
        ""].join("\n");

      var vs = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(vs, v);
      gl.compileShader(vs);

      var fs = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(fs, f);
      gl.compileShader(fs);

      var program = gl.createProgram();
      gl.attachShader(program, vs);
      gl.attachShader(program, fs);
      gl.linkProgram(program);

      if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS))
        log(gl.getShaderInfoLog(vs));

      if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS))
        log(gl.getShaderInfoLog(fs));

      if (!gl.getProgramParameter(program, gl.LINK_STATUS))
        log(gl.getProgramInfoLog(program));

      var aspect = rect.width / rect.height;

      var vertices = new Float32Array([
        -0.5, 0.5*aspect, 0.5, 0.5*aspect,  0.5,-0.5*aspect,
        -0.5, 0.5*aspect, 0.5,-0.5*aspect, -0.5,-0.5*aspect
        ]);

      var vbuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, vbuffer);
      gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

      var itemSize = 2;
      var numItems = vertices.length / itemSize;

      gl.useProgram(program);
      var uColor = gl.getUniformLocation(program, "uColor");
      log("getUniformLocation: " + gl.getUniformLocation(program, "uColor"));
      // gl.uniform4fv(uColor, [0.0, 1.0, 0.0, 1.0]);
      var thinger = new Float32Array([0.0, 1.0, 0.0, 1.0]);
      // gl.uniform4fv(uColor, thinger);
      gl.uniform4(uColor, 0.0, 0.0, 1.0, 1.0);

      var aVertexPosition = gl.getAttribLocation(program, "aVertexPosition");
      gl.enableVertexAttribArray(aVertexPosition);
      gl.vertexAttribPointer(aVertexPosition, itemSize, gl.FLOAT, false, 0, 0);

      gl.drawArrays(gl.TRIANGLES, 0, numItems);

      gl.swapBuffers(function() {
        log("error: " + gl.getError());
      });
    } else {
      gl.resizeBuffers(rect);
    }
  };
}










